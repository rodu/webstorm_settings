<templateSet group="SublimeSnippets">
  <template name="cla" value="class $VAR1$ {&#10;  constructor() {&#10;    $VAR2$&#10;  }&#10;}" description="(Rodu) ES6 Class" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;ClassName&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;// body&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="imjq" value="import $ from 'jquery';" description="(Rodu) Import jQuery" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="def" value="define([$VAR1$], function($VAR2$){&#10;  'use strict';&#10;&#10;  $VAR3$&#10;});" description="RequireJS define" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;'jquery'&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;\$&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="act" value="activate($VAR1$) {&#10;  $VAR2$&#10;}" description="(Rodu) Aurelia activate method" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;model&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;// body&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="bi" value="bind=&quot;$VAR1$&quot;" description="(Rodu) Aurelia bind" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="angser" value="/**&#10;* @ngdoc service&#10;* @name $VAR1$.service:$VAR2$&#10;* @description&#10;* Description of the $VAR2$ service.&#10;*/&#10;(function(angular){&#10;&#10;  class $VAR3$ {&#10;&#10;    $VAR4$&#10;&#10;  }&#10;&#10;  angular&#10;    .module('$VAR1$')&#10;    .service('$VAR2$', [$VAR3$]);&#10;&#10;}(angular));" description="(Rodu) Angular Service ES6" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;moduleName&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;serviceName&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;ServiceClass&quot;" alwaysStopAt="true" />
    <variable name="VAR4" expression="" defaultValue="&quot;constructor() {&#10;      &#10;    \}&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="prom" value="new Promise((resolve$VAR1$) =&gt; {&#10;  $VAR2$&#10;});" description="(Rodu) ES6 Promise" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;, reject&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot; // body&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="spycalf" value="spyOn($VAR1$, '$VAR2$').and.callFake(($VAR3$) =&gt; {&#10;  $VAR4$&#10;});" description="(Rodu) Jasmine spy callFake" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;object&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;method&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;arguments&quot;" alwaysStopAt="true" />
    <variable name="VAR4" expression="" defaultValue="&quot;// body&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="cus" value="@customElement('$END$')" description="(Rodu) Aurelia custom element" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="subdis" value="this.subscriptions.map((subscription) =&gt; subscription.dispose());" description="(Rodu) Aurelia dispose subscriptions" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="aut" value="@autoinject" description="(Rodu) Aurelia Inject" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="auro" value="import { Router } from 'aurelia-router';" description="(Rodu) Aurelia Import Router" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="cli" value="click.delegate=&quot;$VAR1$&quot;" description="(Rodu) Aurelia click.delegate" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="auhtc" value="import { HttpClient } from 'aurelia-http-client';" description="(Rodu) Aurelia Import HttpClient" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="auim" value="import { $VAR1$$VAR2$$VAR3$ } from 'aurelia-framework';" description="(Rodu) Aurelia Import" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;inject&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;, LogManager&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;, customElement&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="defbou" value="define([&quot;jquery&quot;], function($){&#10;    &quot;use strict&quot;;&#10;&#10;    function initialise($component) {&#10;        $END$&#10;    }&#10;&#10;    return {&#10;        &quot;initialise&quot;: initialise&#10;    };&#10;});" description="RequireJS Bound Module Define" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="det" value="detached() {&#10;  $VAR1$&#10;}" description="(Rodu) Aurelia detached method" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;// body&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="tim" value="$timeout(($VAR1$) =&gt; $VAR2$);" description="(Rodu) Angular $timeout" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;args&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;body&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="aueva" value="import { EventAggregator } from 'aurelia-event-aggregator';" description="(Rodu) Aurelia Import EventAggregator" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="comdes" value="this.$onDestroy = () =&gt; bus.dispose(subscriptions);" description="(Rodu) On Component Destroy" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="spy" value="spyOn($VAR1$, '$VAR2$');" description="(Rodu) Jasmine spy" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;object&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;method&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="loginf" value="logger.info('$VAR1$');" description="(Rodu) Aurelia Logger Info" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="excla" value="export class $VAR1$ {&#10;  constructor() {&#10;    $VAR2$&#10;  }&#10;}" description="(Rodu) ES6 Export Class" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;ClassName&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;// body&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="tesdir" value="describe('Directive $VAR1$:', function() {&#10;&#10;  beforeEach(module('$VAR2$'));&#10;&#10;  // The element on which we attach the dashboardPanel directive&#10;  const ELEMENT_HTML = '&lt;div $VAR3$&gt;&lt;/div&gt;';&#10;&#10;  var $rootScope;&#10;  var $compile;&#10;&#10;  function initScope($scope){&#10;    const $directiveScope = $scope || $rootScope.$new();&#10;    const $element = $compile(ELEMENT_HTML)($directiveScope);&#10;&#10;    $directiveScope.$digest();&#10;&#10;    // Access the directive scope object&#10;    return $element.isolateScope();&#10;  }&#10;&#10;  beforeEach(function() {&#10;&#10;    inject(['$rootScope', '$compile', function(_$rootScope_, _$compile_) {&#10;      $rootScope = _$rootScope_;&#10;      $compile = _$compile_;&#10;    }]);&#10;&#10;  });&#10;&#10;  describe('When $VAR4$:', function() {&#10;    it('should $VAR5$', function() {&#10;      $VAR6$&#10;      initScope();&#10;&#10;    });&#10;  });&#10;});" description="(Rodu) Test Angular Directive" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;directiveName&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;moduleName&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;directive-name&quot;" alwaysStopAt="true" />
    <variable name="VAR4" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR5" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR6" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="loger" value="logger.error('$VAR1$');" description="(Rodu) Aurelia Logger Error" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="proto" value="$VAR1$.prototype.$VAR2$ = function $VAR2$($VAR3$){&#10;&#9;$END$&#10;};" description="Prototype" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;class_name&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;method_name&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;first_argument&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="bin" value="bind($VAR1$) {&#10;  $VAR2$&#10;}" description="(Rodu) Aurelia bind method" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;bindingContext, overrideContext&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;// body&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="tescon" value="describe('Controller $VAR1$:', function() {&#10;&#10;  var $controller;&#10;  var $scope;&#10;&#10;  beforeEach(module('$VAR2$'));&#10;&#10;  beforeEach(inject(function($rootScope, _$controller_) {&#10;    $controller = _$controller_;&#10;    $scope = $rootScope.$new();&#10;  }));&#10;&#10;  describe('When $VAR3$:', function() {&#10;    it('should $VAR4$', function() {&#10;      $controller('$VAR1$', { $scope });&#10;&#10;      $VAR5$&#10;    });&#10;  });&#10;});" description="(Rodu) Test Angular Controller" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;ControllerName&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;moduleName&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR4" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR5" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="inj" value="@inject($END$)" description="(Rodu) Aurelia Inject" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="angmod" value="/**&#10;* @ngdoc overview&#10;* @name $VAR1$&#10;* @description&#10;* Description of the $VAR1$ module.&#10;*/&#10;angular.module('$VAR1$', [$VAR2$]);" description="Angular Module" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;moduleName&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="angcon" value="/**&#10;* @ngdoc object&#10;* @name $VAR1$.object:$VAR2$&#10;* @description&#10;* Description of the $VAR2$ constant service.&#10;*/&#10;angular.module('$VAR1$').constant('$VAR2$', '$VAR3$');" description="Angular Constant" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;moduleName&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;constantName&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="auti" value="import { $VAR1$$VAR2$$VAR3$ } from 'aurelia-framework';" description="(Rodu) Aurelia Import Autoinject" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;autoinject&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;, LogManager&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;, customElement&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="forof" value="for (let $VAR1$ of $VAR2$) {&#10;  $VAR3$&#10;}" description="(Rodu) for...of" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;values&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;// body&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="impo" value="import $VAR1$ from '$VAR3$';" description="(Rodu) Import ES6" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;\{  \}&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;module&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="unb" value="unbind($VAR1$) {&#10;  $VAR2$&#10;}" description="(Rodu) Aurelia unbind method" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;arguments&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;// body&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="befprov" value="beforeEach(module(($provide) =&gt; {&#10;  $provide.value('$VAR1$', $VAR2$);&#10;}));" description="beforeEach provide" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="logwa" value="logger.warn('$VAR1$');" description="(Rodu) Aurelia Logger Warn" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ifun" value="(function $VAR1$($VAR2$){&#10;&#9;$END$&#10;})($VAR2$);" description="Function" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;myFn&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;arguments&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="angcont" value="/**&#10;* @ngdoc controller&#10;* @name $VAR1$.controller:$VAR2$&#10;* @description&#10;* Description of the $VAR2$ controller.&#10;*/&#10;angular.module('$VAR1$').controller('$VAR2$', [&#10;  function $VAR2$(){&#10;    'use strict';&#10;&#10;  }&#10;]);" description="Angular Controller" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;moduleName&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;controllerName&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="befinj" value="beforeEach(inject(($VAR1$) =&gt; {&#10;    $VAR2$&#10;}));" description="beforeEach inject" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="tohac" value="toHaveBeenCalled();" description="(Rodu) toHaveBeenCalled" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="angcomp" value="/**&#10;* @ngdoc directive&#10;* @name $VAR1$.directive:$VAR2$&#10;* @description&#10;* Description of the $VAR2$ directive.&#10;*/&#10;(function(angular){&#10;  'use strict';&#10;&#10;  const controller = [&#10;    function $VAR2$(){&#10;      this.$onInit = () =&gt; {&#10;        $VAR5$&#10;      };&#10;&#10;      this.$onDestroy = () =&gt; {};&#10;    }&#10;  ];&#10;&#10;  const component = {&#10;    template$VAR3$: '$VAR4$',&#10;    controller,&#10;    controllerAs: 'vm',&#10;    bindings: {}&#10;  };&#10;&#10;  angular.module('$VAR1$').component('$VAR2$', component);&#10;&#10;}(angular));" description="(Rodu) Angular Component ES6" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;moduleName&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;componentName&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;Url&quot;" alwaysStopAt="true" />
    <variable name="VAR4" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR5" expression="" defaultValue="&quot;// body&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="req" value="const $VAR1$ = require('$VAR2$$VAR1$');" description="(Rodu) Node Require ES6" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;module&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="deb" value="debug('$VAR1$');" description="debug" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;something&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="cre" value="created($VAR1$) {&#10;  $VAR2$&#10;}" description="(Rodu) Aurelia created method" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;owningView, myView&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;// body&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="spyret" value="spyOn($VAR1$, '$VAR2$').and.returnValue($VAR3$);" description="(Rodu) Jasmine spy returnValue" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;object&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;method&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="funes" value="($VAR1$) =&gt; {&#10;  $VAR3$&#10;}$VAR2$" description="(Rodu) Arrow Function" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;arguments&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;;&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;// body&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="arrmaes" value="map(($VAR1$) =&gt; {&#10;  $VAR4$&#10;}$VAR2$)$VAR3$" description="Array map ES6" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;arguments&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;,&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;;&quot;" alwaysStopAt="true" />
    <variable name="VAR4" expression="" defaultValue="&quot;// body&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="cat" value="catch(($VAR1$) =&gt; {&#10;  $VAR2$&#10;  $VAR3$&#10;});" description="(Rodu) ES6 Promise catch" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;error&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;console.log(error);&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;//logger.error('There was an error while loading data!', error);&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="sh" value="show.bind=&quot;$VAR1$&quot;" description="(Rodu) Aurelia show.bind" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="constr" value="constructor($VAR1$) {&#10;  $VAR2$&#10;}" description="(Rodu) ES6 Constructor" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;params&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="eas" value="this.eventAggregator.subscribe($VAR1$, ($VAR2$) =&gt; {&#10;  $VAR4$&#10;})$VAR3$" description="(Rodu) Event Aggregator Subscribe" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;event&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;payload&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;;&quot;" alwaysStopAt="true" />
    <variable name="VAR4" expression="" defaultValue="&quot;// body&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="con" value="&lt;%= config.$END$ %&gt;" description="Grunt variable" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="angval" value="/**&#10;* @ngdoc object&#10;* @name $VAR1$.object:$VAR2$&#10;* @description&#10;* Description of the $VAR2$ value service.&#10;*/&#10;angular.module('$VAR1$').value('$VAR2$', '$VAR3$');" description="Angular Value" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;moduleName&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;valueName&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="use" value="'use strict';" description="use strict" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="adde" value="addEventListener('$VAR1$', ($VAR2$) =&gt; \{&#10;  $VAR4$&#10;\}$VAR3$);" description="" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;type&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;event&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;, false&quot;" alwaysStopAt="true" />
    <variable name="VAR4" expression="" defaultValue="&quot;// body&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="angdir" value="/**&#10;* @ngdoc directive&#10;* @name $VAR1$.directive:$VAR2$&#10;* @description&#10;* Description of the $VAR2$ directive.&#10;*/&#10;angular.module('$VAR1$').directive('$VAR2$', [&#10;  function $VAR2$(){&#10;    'use strict';&#10;&#10;    var&#10;      scope = {};&#10;&#10;    function link ($scope, $element) {&#10;      $VAR3$&#10;    }&#10;&#10;    return {&#10;      restrict: 'A',&#10;      scope: scope,&#10;      link: link&#10;    };&#10;  }&#10;]);" description="Angular Directive" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;moduleName&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;directiveName&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;//body&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="the" value="then(($VAR1$) =&gt; {&#10;  $VAR2$&#10;});" description="(Rodu) ES6 Promise then" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;data&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;// body&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="toha" value="toHaveBeenCalledWith($VAR1$);" description="(Rodu) toHaveBeenCalledWith" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="auteser" value="import { Container } from 'aurelia-framework';&#10;&#10;import { $VAR1$ } from '$VAR2$';&#10;&#10;describe('Service: $VAR1$', () =&gt; {&#10;  const container = new Container();&#10;  let sut;&#10;&#10;  beforeEach(() =&gt; {&#10;    sut = container.get($VAR1$);&#10;  });&#10;&#10;  describe('when instantiating the service', () =&gt; {&#10;    it('should...', () =&gt; {&#10;      $VAR3$&#10;    });&#10;  });&#10;});" description="(Rodu) Aurelia Test Service" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;ServiceClass&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;ServiceModule&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="scodes" value="$scope.$on('$destroy', () =&gt; bus.dispose(subscriptions));" description="(Rodu) On Scope Destroy" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="funin" value="($VAR1$) =&gt; $VAR3$" description="(Rodu) Arrow Func Inline" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;arguments&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;body&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="thi" value="this.$VAR1$ = $VAR1$;" description="(Rodu) ES6 Constructor Property" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="att" value="attached() {&#10;  $VAR1$&#10;}" description="(Rodu) Aurelia attached method" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;// body&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="spycalt" value="spyOn($VAR1$, '$VAR2$').and.callThrough();" description="(Rodu) Jasmine spy callThrough" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;object&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;method&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="rep" value="repeat.for=&quot;$VAR1$ of $VAR2$&quot;" description="(Rodu) Aurelia repeat.for" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;item&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;items&quot;" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="angfac" value="/**&#10;* @ngdoc service&#10;* @name $VAR1$.service:$VAR2$&#10;* @description&#10;* Description of the $VAR2$ service.&#10;*/&#10;angular.module('$VAR1$').factory('$VAR2$', [&#10;  function $VAR2$(){&#10;    'use strict';&#10;&#10;    function $VAR3$(){&#10;      // $VAR4$&#10;    }&#10;&#10;    return {&#10;      $VAR3$: $VAR3$&#10;    };&#10;  }&#10;]);" description="Angular Factory" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;moduleName&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;serviceName&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;api&quot;" alwaysStopAt="true" />
    <variable name="VAR4" expression="" defaultValue="&quot;body&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="aulog" value="const logger = LogManager.getLogger('$VAR1$');" description="(Rodu) Aurelia Logger" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;ClassName&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="fun" value="function $VAR1$($VAR2$) {&#10;  $VAR3$&#10;}" description="(Rodu) ES5 Function" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;arguments&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;// body&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="eap" value="this.eventAggregator.publish($VAR1$, $VAR2$);" description="(Rodu) Event Aggregator Publish" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;event&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;payload&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="tesser" value="describe('Service $VAR1$:', function() {&#10;  'use strict';&#10;&#10;  var $VAR1$;&#10;&#10;  beforeEach(module('$VAR2$'));&#10;&#10;  beforeEach(inject(function(_$VAR1$_) {&#10;    $VAR1$ = _$VAR1$_;&#10;  }));&#10;&#10;  describe('When $VAR3$:', function() {&#10;    it('should $VAR4$', function() {&#10;      $VAR5$&#10;    });&#10;  });&#10;});" description="(Rodu) Test Angular Service" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;serviceName&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;moduleName&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR4" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR5" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ngi" value="'ngInject';" description="(Rodu) ngInject declaration" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="nn" value="expect($VAR1$).not.toBeNull();$END$" description="not.toBeNull" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ne" value="expect($VAR1$).not.toEqual($VAR2$);$END$" description="not.toEqual" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="any" value="jasmine.any($VAR1$)$END$" description="jasmine.any" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="caa" value="$VAR1$.calls.allArgs()" description="spy.calls.allArgs" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;spy&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="aee" value="afterEach(() =&gt; {&#10;&#9;$VAR1$&#10;});" description="afterEach" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="nb" value="expect($VAR1$).not.toBe($VAR2$);$END$" description="not.toBe" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="tbt" value="expect($VAR1$).toBeTruthy();$END$" description="toBeTruthy" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="nu" value="expect($VAR1$).not.toBeUndefined();$END$" description="not.toBeUndefined" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="cf" value="$VAR1$.calls.first()" description="spy.calls.first" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;spy&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="tb" value="expect($VAR1$).toBe($VAR2$);$END$" description="toBe" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="tbd" value="expect($VAR1$).toBeDefined();$END$" description="toBeDefined" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="nf" value="expect($VAR1$).not.toBeFalsy();$END$" description="not.toBeFalsy" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="cmr" value="$VAR1$.calls.mostRecent()" description="spy.calls.mostRecent" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;spy&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="thbcw" value="expect($VAR1$).toHaveBeenCalledWith($VAR2$);$END$" description="toHaveBeenCalledWith" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;params&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="nd" value="expect($VAR1$).not.toBeDefined();$END$" description="not.toBeDefined" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="nlt" value="expect($VAR1$).not.toBeLessThan($VAR2$);$END$" description="not.toBeLessThan" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="te" value="expect($VAR1$).toEqual($VAR2$);$END$" description="toEqual" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ngt" value="expect($VAR1$).not.toBeGreaterThan($VAR2$);$END$" description="not.toBeGreaterThan" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="nm" value="expect($VAR1$).not.toMatch($VAR2$);$END$" description="not.toMatch" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="nct" value="expect($VAR1$).not.toBeCloseTo($VAR2$, $VAR3$);$END$" description="not.toBeCloseTo" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;number&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;delta&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="desc" value="describe('$VAR1$', function() {&#10;&#9;$VAR2$&#10;});" description="describe" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;Name of the group&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="xdesc" value="xdescribe('$VAR1$', function() {&#10;&#9;$VAR2$&#10;});" description="xdescribe" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;Name of the group&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="desce" value="describe('$VAR1$', () =&gt; {&#10;&#9;$VAR2$&#10;});" description="describe" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;Name of the group&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="srv" value="spyOn($VAR1$, '$VAR2$').and.returnValue('$VAR3$');$END$" description="spyOn.and.returnValue" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;object&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;method&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ss" value="spyOn($VAR1$, '$VAR2$').and.stub();$END$" description="spyOn.and.stub" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;object&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;method&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="it" value="it('$VAR1$', function() {&#10;&#9;$VAR2$&#10;});" description="it" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;should behave...&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ite" value="it('$VAR1$', () =&gt; {&#10;&#9;$VAR2$&#10;});" description="it" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;should behave...&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="scfe" value="spyOn($VAR1$, '$VAR2$').and.callFake($VAR3$);$END$" description="spyOn.and.callFake" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;object&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;method&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;() =&gt; \{&#10;  &#10;\}&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="so" value="spyOn($VAR1$, '$VAR2$')$VAR3$;$END$" description="spyOn" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;object&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;method&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="fite" value="fit('$VAR1$', () =&gt; {&#10;  $VAR2$&#10;});" description="focused it" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;should behave...&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="fdesce" value="fdescribe('$VAR1$', () =&gt; {&#10;  $VAR2$&#10;});" description="focused describe" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;Name of the group&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="xit" value="xit('$VAR1$', function() {&#10;&#9;$VAR2$&#10;});" description="xit" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;should behave...&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="fit" value="fit('$VAR1$', function() {&#10;  $VAR2$&#10;});" description="focused it" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;should behave...&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="scf" value="spyOn($VAR1$, '$VAR2$').and.callFake($VAR3$);$END$" description="spyOn.and.callFake" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;object&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;method&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;function() \{&#10;  &#10;\}&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ste" value="spyOn($VAR1$, '$VAR2$').and.throwError('$VAR3$');$END$" description="spyOn.and.throwError" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;object&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;method&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;error&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="oc" value="jasmine.objectContaining({'$VAR1$': $VAR2$\});$END$" description="jasmine.objectContaining" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;key&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="cso" value="jasmine.createSpyObj('$VAR1$', ['$VAR2$'$VAR3$]);$END$" description="createSpyObj" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;spy name&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;method name&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="xite" value="xit('$VAR1$', () =&gt; {&#10;&#9;$VAR2$&#10;});" description="xit" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;should behave...&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="fdesc" value="fdescribe('$VAR1$', function() {&#10;  $VAR2$&#10;});" description="focused describe" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;Name of the group&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="cs" value="jasmine.createSpy('$VAR1$');$END$" description="createSpy" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="xdesce" value="xdescribe('$VAR1$', () =&gt; {&#10;&#9;$VAR2$&#10;});" description="xdescribe" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;Name of the group&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="sct" value="spyOn($VAR1$, '$VAR2$').and.callThrough();$END$" description="spyOn.and.callThrough" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;object&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;method&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="tbct" value="expect($VAR1$).toBeCloseTo($VAR2$, $VAR3$);$END$" description="toBeCloseTo" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;number&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;delta&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="tc" value="expect($VAR1$).toContain($VAR2$);$END$" description="toContain" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;array&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;item&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="caf" value="$VAR1$.calls.argsFor($VAR2$)" description="spy.calls.argsFor" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;spy&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;call number&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="cr" value="$VAR1$.calls.reset()" description="spy.calls.reset" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;spy&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ca" value="$VAR1$.calls.all()" description="spy.calls.all" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;spy&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="thbc" value="expect($VAR1$).toHaveBeenCalled();$END$" description="toHaveBeenCalled" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="nc" value="expect($VAR1$).not.toContain($VAR2$);$END$" description="not.toContain" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;array&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;item&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="nt" value="expect($VAR1$).not.toThrow();$END$" description="not.toThrow" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="tblt" value="expect($VAR1$).toBeLessThan($VAR2$);$END$" description="toBeLessThan" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="tbn" value="expect($VAR1$).toBeNull();$END$" description="toBeNull" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="tbf" value="expect($VAR1$).toBeFalsy();$END$" description="toBeFalsy" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="bee" value="beforeEach(() =&gt; {&#10;&#9;$VAR1$&#10;});" description="beforeEach" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="cc" value="$VAR1$.calls.count()" description="spy.calls.count" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;spy&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ae" value="afterEach(function() {&#10;&#9;$VAR1$&#10;});" description="afterEach" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="tte" value="expect($VAR1$).toThrowError($VAR2$);$END$" description="toThrowError" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;error&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="tbgt" value="expect($VAR1$).toBeGreaterThan($VAR2$);$END$" description="toBeGreaterThan" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="tbu" value="expect($VAR1$).toBeUndefined();$END$" description="toBeUndefined" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="exp" value="expect($VAR1$)$END$" description="expect" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="tt" value="expect($VAR1$).toThrow();$END$" description="toThrow" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="tm" value="expect($VAR1$).toMatch($VAR2$);$END$" description="toMatch" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="be" value="beforeEach(function() {&#10;&#9;$VAR1$&#10;});" description="beforeEach" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="throw" value="throw &quot;$VAR1$&quot;;&#10;$END$" description="Throw Exception" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="nam" value="namespace $VAR1${&#10;&#9;$END$&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="if" value="if ($VAR1$) {&#10;&#9;$END$&#10;}" description="if …" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;condition&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="func" value="function $VAR1$($VAR2$) {&#10;&#9;$END$&#10;}" description="Function" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;function_name&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;argument&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="prop" value="private _$VAR1$ : $VAR2$;&#10;public get $VAR1$() : $VAR2$ {&#10;&#9;return this._$VAR1$;&#10;}&#10;public set $VAR1$(v : $VAR2$) {&#10;&#9;this._$VAR1$ = v;&#10;}" description="full property …" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;string&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ret0" value="return false;$END$" description="return false" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ret" value="return $VAR1$;$END$" description="return statement" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="setter" value="public set $VAR1$(v : $VAR2$) {&#10;&#9;this.$VAR3$ = v;&#10;}" description="set-property …" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;string&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;_value&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="fori" value="for (var $VAR20$ = 0; $VAR20$ &lt; $VAR1$.length; $VAR20$++) {&#10;&#9;$VAR100$$END$&#10;}" description="for (…) {…}" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;Things&quot;" alwaysStopAt="true" />
    <variable name="VAR20" expression="" defaultValue="&quot;i&quot;" alwaysStopAt="true" />
    <variable name="VAR100" expression="" defaultValue="&quot;[]&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="do" value="do {&#10;&#9;$END$&#10;} while ($VAR1$);" description="do … while …" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;a &lt;= 10&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="getter" value="public get $VAR1$() : $VAR2$ {&#10;&#9;$VAR3$&#10;}" description="get-property …" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;string&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;return &quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ctor" value="constructor($VAR1$) {&#10;&#9;$VAR2$&#10;}" description="constructor …" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;// code...&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="meth" value="$VAR1$ $VAR2$($VAR3$) : $VAR4$ {&#10;&#9;$END$&#10;}" description="class method" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;public&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;arguments&quot;" alwaysStopAt="true" />
    <variable name="VAR4" expression="" defaultValue="&quot;void&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ref" value="/// &lt;reference path=&quot;$VAR1$&quot; /&gt;&#10;$END$" description="does a triple-slash reference" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="for" value="for (var $VAR1$ = $VAR2$; $VAR1$ &lt; $VAR3$; ++$VAR1$) {&#10;&#9;$END$&#10;}" description="for (…) {…}" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;i&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;0&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;length&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="class" value="class $VAR2$$VAR3$ {&#10;&#9;$VAR5$&#10;&#9;$VAR6$($VAR7$) {&#10;&#9;&#9;$END$&#10;&#9;}&#10;}" description="class …" toReformat="true" toShortenFQNames="true">
    <variable name="VAR2" expression="" defaultValue="&quot;ClassName&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot; extends &quot;" alwaysStopAt="true" />
    <variable name="VAR5" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR6" expression="" defaultValue="&quot;constructor&quot;" alwaysStopAt="true" />
    <variable name="VAR7" expression="" defaultValue="&quot;argument&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="clog" value="console.log($VAR1$);" description="console log" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="import" value="import $VAR1$ = require(&quot;$VAR2$&quot;);&#10;$END$" description="imports a module …" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="forobj" value="for (var $VAR1$ in $VAR2$) {&#10;&#9;$END$&#10;}" description="for … in … loop" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;i&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;Object&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="switch" value="switch ($VAR1$) {&#10;&#9;case &quot;$VAR2$&quot;:&#10;&#9;&#9;$VAR3$&#10;&#9;&#9;break;&#10;&#9;$END$&#10;&#9;default:&#10;&#9;&#9;$VAR4$&#10;&#9;&#9;break;&#10;}" description="switch statement …" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;variable&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;// code...&quot;" alwaysStopAt="true" />
    <variable name="VAR4" expression="" defaultValue="&quot;// code...&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ret1" value="return true;$END$" description="return true" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="tout" value="setTimeout(() =&gt; {$END$}$VAR2$, $VAR1$);" description="setTimeout function" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;500&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ifelse" value="if ($VAR1$) { &#10;&#9;$VAR2$&#10;} else {&#10;&#9;$VAR3$&#10;}" description="if … else …" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;condition&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;// code...&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;// code...&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
</templateSet>